<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <title>Lab 4: Network Address Translator</title>
    <link rel="stylesheet" type="text/css" href="Lab4_files/markdown.css">
  </head>
  <body>
<h1><a id="Lab_4_Network_Address_Translator_0"></a>Lab 4: Network Address Translator</h1>
<ul>
<li>Due <strong>Wednesday, November 30, noon</strong></li>
<li>Please refer to the <a href="https://suclass.stanford.edu/c4x/Engineering/CS144/asset/admin.pdf">course administrative handout</a> for the late policy</li>
</ul>
<h3><a id="Links_5"></a>Links</h3>
<ul>
<!--<li><a href="http://web.stanford.edu/class/cs144/assignments/nat/lab4slides.pdf">Slides --
  --from last year</a> (note: due dates and IP addresses are not --
  --up-to-date)</li> -->
<li><a href="https://web.stanford.edu/class/cs144/cgi-bin/submit/index.php">Submission website</a></li>
</ul>
<h2><a id="0_Collaboration_Policy_10"></a>0. Collaboration Policy</h2>
<p>You should direct most questions to Piazza, but <em><strong>do not</strong></em> post any source code there. Please make a private post when appropriate.</p>
<p>You must write all the code you hand in for the programming 
assignments, except for the code that we give you as part of the 
assignment and system library code. You are <strong>not allowed</strong>
 to show your code to anyone else in the class or look at anyone else’s 
code. You also must not look at solutions from previous years. You may 
discuss the assignments with other students, but do not copy each 
others’ code. Please refer to the course administrative handout for more
 details, and ask questions in Piazza if anything is unclear.</p>
<h2><a id="1_Introduction_16"></a>1. Introduction</h2>
<p>In this lab assignment you will be writing a simple NAT that can 
handle ICMP and TCP. It will implement a subset of the functionality 
specified by <a href="http://tools.ietf.org/rfc/rfc5382.txt">RFC5382</a> and <a href="http://tools.ietf.org/rfc/rfc5508.txt">RFC5508</a>. Expect to refer often to these RFCs.</p>
<p>Before beginning this lab, it is crucial that you:</p>
<ul>
<li>Understand how NATs work. Consider re-watching the NAT lectures.</li>
<li>Understand TCP handshake and teardown packet sequences. Consider working through the TCP state diagram.</li>
<li>Understand NAT Endpoint Independence.</li>
</ul>
<p>We will create a NAT that sits in Mininet between the app servers and
 the rest of the Internet. The internal interface of the NAT faces the 
Internet, while the external interfaces are connected to app servers. 
The app servers are “outside” the NAT, while the Internet is “inside.”</p>
<p>Your NAT must rewrite packets from client going to the application 
servers, such that they appear that they are coming from the NAT 
interface facing the application servers. For example, consider this 
topology, where the NAT’s internal interface (<code>eth1</code>) faces the client and its external interface (<code>eth2</code>) has two application servers connected with a switch:</p>
<p><img src="Lab4_files/diagram.png" alt="Topology"></p>
<p>The setup for this assignment is very similar to Lab 3. In this 
topology, the NAT rewrites packets from the client, setting the source 
IP address to <code>184.72.104.221</code>. When the NAT receives packets addressed to <code>184.72.104.221</code>,
 it determines whether the packet has a valid mapping to an internal 
source, and if so, translates the address to the corresponding client.</p>
<p>For this assignment, interface <code>eth1</code> will always be the internal interface and all other interfaces will always be external interfaces. You can hardcode <code>eth1</code> as the internal interface.</p>
<p>A correct implementation should support the following operations from the client:</p>
<ul>
<li>Pinging the NAT’s internal interface from the client</li>
<li>Pinging the app server (e.g. <code>184.72.104.217</code>)</li>
<li>Downloading files using HTTP from the app servers</li>
<li>All packets to external hosts (app servers) from the NAT should appear to come from <code>eth2</code>'s address (e.g. <code>184.72.104.221</code> above).</li>
</ul>
<blockquote>
<p>After this lab, you will have built a working NAT which works on the 
world-wide web (if the routing table were updated)! Later on on Lab 5, 
you will put together your cTCP with your router/NAT and will have 
basically built the Internet!</p>
</blockquote>
<h2><a id="2_General_NAT_Logic_44"></a>2. General NAT Logic</h2>
<p>There are three major parts to the assignment:</p>
<ul>
<li>Translating ICMP echo messages (and their corresponding replies)</li>
<li>Translating TCP packets</li>
<li>Cleaning up defunct mappings between internal addresses and the 
external address. Note that your NAT is not required to handle UDP. It 
is entirely up to you whether you drop or forward UDP traffic.</li>
</ul>
<h3><a id="Static_Router_52"></a>Static Router</h3>
<p>Your NAT builds on the static router of Lab 3. You must add a new command-line flag, <code>-n</code>, which controls whether the NAT is enabled. If the <code>-n</code> flag is not passed, then the router should act according the requirements of Lab 3. For example, it should be possible to <code>traceroute</code> across the router when the <code>-n</code>
 flag is not passed. All of the ICMP errors in Lab 3 still apply. For 
example, trying to open a TCP port on the router should cause an ICMP 
port unreachable reply (with the caveat of TCP requirement 4 below). 
More precisely:</p>
<ul>
<li>Your NAT MUST generate and process ICMP messages as per the static router of Lab 3.</li>
</ul>
<h3><a id="ICMP_Echo_58"></a>ICMP Echo</h3>
<p>The first four bytes of an ICMP echo request contain a 16-bit query 
identifier and a 16-bit sequence number. Because multiple hosts behind 
the NAT may choose the same identifier and sequence number, the NAT must
 make their combination globally unique. It needs to maintain the 
mapping between a globally unique identifier and the corresponding 
internal address and internal identifier, so that it can rewrite the 
corresponding ICMP echo reply messages. The first three requirements for
 your NAT are:</p>
<ul>
<li>Your NAT MUST translate ICMP echo requests from internal addresses 
to external addresses, and MUST correctly translate the corresponding 
ICMP echo replies.</li>
<li>ICMP echo requests MUST be external host independent: two requests 
from the same internal host with the same query identifier to different 
external hosts MUST have the same external identifier.</li>
<li>An ICMP query mapping MUST NOT expire less than 60 seconds after its
 last use. This value MUST be configurable, as described below. Other 
Lab 3 ICMP behavior should continue to work properly (e.g. responding to
 an echo request from an external host addressed to the NAT’s external 
interface).</li>
</ul>
<h3><a id="TCP_Connections_66"></a>TCP Connections</h3>
<p>When an internal host opens a TCP connection to an external host, 
your NAT must rewrite the packet so that it appears as if it is coming 
from the NAT’s external address. This requires allocating a globally 
unique port, under a set of restrictions as detailed below. The 
requirements for your NAT are a subset of those in specified in <a href="http://tools.ietf.org/rfc/rfc5382.txt">RFC5382</a>;
 in some cases they are more restrictive. Refer to the RFC for details 
on the terms used. Your NAT has the following requirements:</p>
<ul>
<li>Your NAT MUST have an “Endpoint-Independent Mapping” behavior for TCP.</li>
<li>Your NAT MUST support all valid sequences of TCP packets (defined in <a href="http://tools.ietf.org/rfc/rfc0793.txt">RFC0793</a>)
 for connections initiated both internally as well as externally when 
the connection is permitted by the NAT. In particular, in addition to 
handling the TCP 3-way handshake mode of connection initiation, A NAT 
MUST handle the TCP <a href="http://ttcplinux.sourceforge.net/documents/one/tcpstate/tcpstate.html">simultaneous-open mode of connection initiation</a>.</li>
<li>Your NAT MUST have an “Endpoint-Independent Filtering” behavior for TCP.</li>
<li>Your NAT MUST NOT respond to an unsolicited inbound <code>SYN</code>
 packet for at least 6 seconds after the packet is received. If during 
this interval the NAT receives and translates an outbound <code>SYN</code> for the connection the NAT MUST silently drop the original unsolicited inbound <code>SYN</code> packet. Otherwise, the NAT MUST send an ICMP Port Unreachable error (Type 3, Code 3) for the original <code>SYN</code>.</li>
<li>If your NAT cannot determine whether the endpoints of a TCP 
connection are active, it MUST abandon the session if it has been idle 
for some time. In such cases, the value of the “established connection 
idle-timeout” MUST NOT be less than 2 hours 4 minutes. The value of the 
“transitory connection idle-timeout” MUST NOT be less than 4 minutes. 
This value MUST be configurable, as described below. Note that you MUST 
timeout idle connections.</li>
<li>Your NAT MUST NOT have a “Port assignment” behavior of “Port overloading” for TCP. <strong>Note:</strong> Hairpinning for TCP is NOT required. It is up to you whether you support it, or other behavior not required here.</li>
</ul>
<h3><a id="Mappings_78"></a>Mappings</h3>
<p>When assigning a port to a mapping, you are free to choose a port any
 way you choose. The only requirement is that you do not use the 
well-known ports (<code>0</code>-<code>1023</code>).</p>
<p>As noted above, mappings should be Endpoint Independent. Once a mapping is made between an internal host’s <code>(ip, port)</code> pair to an external port in the NAT, any traffic from that host’s <code>(ip, port)</code>
 directed to any external host, and any traffic from any external host 
to the mapped external port will be rewritten and forwarded accordingly.</p>
<h3><a id="Cleaning_up_defunct_mappings_84"></a>Cleaning up defunct mappings</h3>
<p>Your NAT must clean up defunct mappings. Your NAT must periodically 
timeout both defunct ICMP query sessions and idle TCP connections. Once 
all connections using a particular mapping are closed or timed out, the 
mapping should be cleared. Once cleared, a mapping can be reused in new 
connections.</p>
<p>The periodic function that handles timeouts should fire in its own 
separate thread (more on threading below). The following three timeout 
intervals for mappings should be configurable via command-line flags:</p>
<pre><code>-I INTEGER -- ICMP query timeout interval in seconds (default to 60)
-E INTEGER -- TCP Established Idle Timeout in seconds (default to 7440)
-R INTEGER -- TCP Transitory Idle Timeout in seconds (default to 300)
</code></pre>
<p>TCP Established Idle Timeout applies to TCP connections in the 
established (data transfer) state. TCP Transitory Idle Timeout applies 
to connections in other states (e.g. <code>LISTEN</code>). Refer to the TCP state diagram.</p>
<p><strong>Note:</strong> Though the RFCs specify minimum timeout 
intervals, these are reflected in the defaults. The intervals should be 
configurable to times below those minimums so that we are able to test 
your timeout functionality in a reasonable time.</p>
<h3><a id="Mapping_data_structure_and_Concurrency_98"></a>Mapping data structure and Concurrency</h3>
<p>Mapping state and delaying incoming <code>SYN</code> connections will
 require a data structure similar to the ARP cache from Lab 3. Unlike 
Lab 3, however, in this assignment it is up to you to implement it!</p>
<p>Be sure to study how the ARP cache works. For handling timeouts, a separate thread is spawned (at the top of <code>sr_router.c</code>)
 that periodically runs. NAT timeouts should have their own thread as 
well. Because the main forwarding thread and the ARP cache timeout 
thread share the data structure, the ARP cache accessors and mutators 
use locks. Be sure that your NAT’s mapping data structure uses locks as 
well, otherwise nasty concurrency bugs will be sure to crop up.</p>
<p>In addition, be careful how your mapping table returns mappings, you 
do not want to hand out pointers to structures that may be freed by the 
periodic timeout. Take a look at the <code>sr_arpcache_lookup()</code> code in the ARP cache.</p>
<h2><a id="3_Implementation_Guidance_106"></a>3. Implementation Guidance</h2>
<p>You will use the same VM that you setup in Lab 3 for this assignment. For instructions on starting the VM, please refer to <a href="http://web.stanford.edu/class/cs144/assignments/vm/vm-setup.html">this handout</a>. To get you started on the right track, we’ve provide skeleton code for a possible NAT mapping data structure.</p>
<p>SSH into your VM and download the skeleton code for Lab 4 using Git:</p>
<pre><code>cd ~
git clone https://bitbucket.org/cs144-1617/lab4.git
</code></pre>
<p>The skeleton code resides in  sr_nat_code.tar.gz  .</p>
<pre><code>cd lab4/
</code></pre>
<p>The <code>router</code> directory is a link to your Lab 3 directory for convenience. <strong>We recommend you make a copy of your Lab 3 submission in your Lab 4 directory as follows:</strong></p>
<pre><code>pwd
&gt; /home/cs144/lab4
rm router
cp -r ~/lab3/router ./
</code></pre>
<p><strong>When running your compiled <code>sr</code>, please ensure that it sees the <code>IP_CONFIG</code> and <code>rtable</code> files corresponding to Lab 4.</strong></p>
<pre><code>cp rtable ~/lab4/router/
cp IP_CONFIG ~/lab4/router/
</code></pre>
<p>Now untar the file <code>sr_nat_code.tar.gz</code>. Then you will find two files, <code>sr_nat.c</code> and <code>sr_nat.h</code>.</p>
<pre><code>tar xf sr_nat_code.tar.gz
mv sr_nat.c ./router/
mv sr_nat.h ./router/
</code></pre>
<p>Now, configure the environment and start Mininet and POX by running the following command.</p>
<pre><code>sudo ./run_all.sh
</code></pre>
<!-- <p>You should see an output that looks like this (except for the IP addresses):</p>
<pre><code>mininet@mininet-vm:~/cs144_lab4$ sudo ./run_all.sh
</code></pre> -->
<p>We provide a reference implementation (<code>sr_nat</code>) for you to test the environment. Start the reference <code>sr_nat</code></p>
<pre><code>./sr_nat -n
</code></pre>
<p>Note that <code>-n</code> means NAT is enabled.  You should see an output like this:</p>
<pre><code>mininet@mininet-vm:~/cs144_lab4$ ./sr_nat -n
Using VNS sr stub code revised 2009-10-14 (rev 0.20)
Loading routing table from server, clear local routing table.
Loading routing table
---------------------------------------------
Destination Gateway     Mask    Iface
0.0.0.0     10.0.1.100  0.0.0.0 eth1
184.72.104.217      184.72.104.217  255.255.255.255 eth2
107.23.87.29        107.23.87.29    255.255.255.255 eth2
---------------------------------------------
Client mininet connecting to Server localhost:8888
Requesting topology 0
successfully authenticated as mininet
Loading routing table from server, clear local routing table.
Loading routing table
---------------------------------------------
Destination Gateway     Mask    Iface
0.0.0.0     10.0.1.100  0.0.0.0 eth1
184.72.104.217      184.72.104.217  255.255.255.255 eth2
107.23.87.29        107.23.87.29    255.255.255.255 eth2
---------------------------------------------
Router interfaces:
eth2    HWaddr02:4c:0c:94:8b:9f
    inet addr 184.72.104.221
eth1    HWaddr2a:20:2f:d2:91:15
    inet addr 10.0.1.1
 -- Ready to process packets --
</code></pre>
<p>Now, test whether <code>ping</code> works.</p>
<pre><code>ping &lt;SERVER1_IP&gt; (184.72.104.217)
</code></pre>
<p>To see whether the NAT is doing the translation, let’s take a look at the packet received at <code>server1</code>.
 To do so, go to the terminal where you run the Mininet, type the 
following command in the Mininet command line interface (CLI):</p>
<pre><code>mininet&gt; server1 tcpdump -n -i server1-eth0
</code></pre>
<p>If you do not see anything, type <code>Ctrl + C</code> to flush out the output. And you should be able to see the following output:</p>
<pre><code>tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on server1-eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
03:22:42.744170 IP 184.72.104.221 &gt; 184.72.104.217: ICMP echo request, id 1051, seq 1, length 64
03:22:42.744202 IP 184.72.104.217 &gt; 184.72.104.221: ICMP echo reply, id 1051, seq 1, length 64
</code></pre>
<p>Now, let’s disable NAT. Use <code>Ctrl + C</code> to stop the current <code>./sr_nat -n</code> process, and run the following command</p>
<pre><code>./sr_nat
</code></pre>
<p>Note that we do not run sr_nat with the <code>-n</code> parameter, which means the NAT is disabled.</p>
<p>Again, run <code>ping</code> from your VM terminal:</p>
<pre><code>ping &lt;SERVER1_IP&gt;
</code></pre>
<p>You can also use <code>tcpdump</code> to see the packets reaching <code>server</code> in Mininet:</p>
<pre><code>mininet&gt; server1 tcpdump -n -i server1-eth0
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on server1-eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
03:25:22.204476 IP 184.72.104.217 &gt; 10.0.1.100: ICMP echo reply, id 10894, seq 7, length 64
03:25:23.211268 IP 10.0.1.100 &gt; 184.72.104.217: ICMP echo request, id 10894, seq 8, length 64
</code></pre>
<p>This time, since the NAT is disabled, the source IP shows the client IP instead.</p>
<p>This assignment would require some thread programming. If you do not 
have thread programming experience, then Lectures 9, 10, and 13 of <a href="http://www.stanford.edu/class/cs110/">CS110</a>
 might be helpful introductions. There are also many resources on the 
web explaining why and when systems use them. Finally, there are lots of
 good <a href="https://computing.llnl.gov/tutorials/pthreads/">pthreads tutorials</a>
 on the web, for concrete programming guidance. You can also use the ARP
 cache code as a guide. Since this isn’t a high performance system, it’s
 better to be conservative with your locks; a race condition is much 
harder to debug than a deadlock.</p>
<h3><a id="Tracking_Connections_216"></a>Tracking Connections</h3>
<p>You do not need to keep lots of state per connection. For example, there is no need to track <code>seqno</code>s
 or window values or ensure TCP packets are in proper order to the end 
hosts. Keep only the information that is useful to the NAT for 
establishing or clearing mappings.</p>
<p>When rewriting TCP packets, remember to update the checksum (over the
 pseudo-header, TCP header, and payload). The TCP checksum is calculated
 like the IP checksum, so you can reuse the <code>cksum</code> function.
 Note that if the checksum is incorrect when the packet comes in, you 
can drop it; you should not “correct the checksum” as that would hide 
potential attackers or errors.</p>
<h3><a id="Adding_commandline_flags_222"></a>Adding command-line flags</h3>
<p>You must add the following command-line flags to <code>sr_main.c</code>:</p>
<pre><code>-n         -- Enable NAT functionality
-I INTEGER -- ICMP query timeout interval in seconds (default to 60)
-E INTEGER -- TCP Established Idle Timeout in seconds (default to 7440)
-R INTEGER -- TCP Transitory Idle Timeout in seconds (default to 300)
</code></pre>
<p>Make sure to adjust the parameter to <code>getopt()</code>, and add the proper cases. <code>getopt()</code> is a useful C library call to parse a list of arguments passed to your program. Here is a good tutorial on using getopt: <a href="http://www.ibm.com/developerworks/aix/library/au-unix-getopt.html">Command line processing using getopt()</a>.</p>
<p>For example, starting your NAT with:</p>
<pre><code>./sr -s localhost -p 8888 -n -I 70 -R 40
</code></pre>
<p>Would enable NAT functionality, timeout ICMP mappings after 70 
seconds, TCP mappings with at least one established connection after 
7440 seconds, and TCP mappings with only transitory connections after 40
 seconds.</p>
<h3><a id="Reference_Implementation_239"></a>Reference Implementation</h3>
<p>A reference implementation (binary) is available at <code>~/lab4/sr_nat</code>.</p>
<h2><a id="4_Submission_243"></a>4. Submission</h2>
<h3><a id="README_245"></a>README</h3>
<p>You will attach a <code>README</code> file to your submission. This 
file should be 2-3 page document (a page being 30-40 lines) with no more
 than 80 characters per column to make it easier to read. This file 
should be included with your submission. It should contain the following
 sections:</p>
<ul>
<li><strong>Program Structure and Design</strong> - Describe the 
high-level structure of your code, by insisting on what you actually 
added to the code. You do not need to discuss in detail the structures 
that you inherited from the starter code. This should be the longest and
 most important part of the <code>README</code>. Use this as an 
opportunity to highlight important design aspects (data structures, 
algorithms, networking principles) and provide greater detail on those 
areas for your grading TA to understand. You are strongly encouraged to 
make this <code>README</code> as readable as possible by using subheadings and outlines. Do <strong>NOT</strong> simply translate your program into an paragraph of English.</li>
<li><strong>Implementation Challenges</strong> - Describe the parts of 
code that you found most troublesome and explain why. Reflect on how you
 overcame those challenges and what helped you finally understand the 
concept that was giving you trouble.</li>
<li><strong>Testing</strong> - Describe the tests you performed on your 
code to evaluate functionality and robustness. Enumerate possible edge 
cases and explain how you tested for them. Additionally, talk about 
general testing strategies you used to test systems code.</li>
<li><strong>Remaining Bugs</strong> - Point out and explain as best you can any bugs that remain in the code.</li>
</ul>
<h3><a id="Submission_254"></a>Submission</h3>
<p>To package up your code, run:</p>
<pre><code>make submit
</code></pre>
<p>Submit the resulting tarball to the <a href="https://web.stanford.edu/class/cs144/cgi-bin/submit/index.php">submission site</a>. If you do not have a <code>README</code> file, this will cause an error.</p>


</body></html>